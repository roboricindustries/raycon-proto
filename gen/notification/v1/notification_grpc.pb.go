// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateServiceClient interface {
	UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error)
	GetEffectiveTemplate(ctx context.Context, in *GetEffectiveTemplateRequest, opts ...grpc.CallOption) (*GetEffectiveTemplateResponse, error)
	ListTemplateHistory(ctx context.Context, in *ListTemplateHistoryRequest, opts ...grpc.CallOption) (*ListTemplateHistoryResponse, error)
	DeleteCompanyTemplate(ctx context.Context, in *DeleteCompanyTemplateRequest, opts ...grpc.CallOption) (*DeleteCompanyTemplateResponse, error)
}

type templateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServiceClient(cc grpc.ClientConnInterface) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error) {
	out := new(UpsertTemplateResponse)
	err := c.cc.Invoke(ctx, "/notification.v1.TemplateService/UpsertTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) GetEffectiveTemplate(ctx context.Context, in *GetEffectiveTemplateRequest, opts ...grpc.CallOption) (*GetEffectiveTemplateResponse, error) {
	out := new(GetEffectiveTemplateResponse)
	err := c.cc.Invoke(ctx, "/notification.v1.TemplateService/GetEffectiveTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplateHistory(ctx context.Context, in *ListTemplateHistoryRequest, opts ...grpc.CallOption) (*ListTemplateHistoryResponse, error) {
	out := new(ListTemplateHistoryResponse)
	err := c.cc.Invoke(ctx, "/notification.v1.TemplateService/ListTemplateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteCompanyTemplate(ctx context.Context, in *DeleteCompanyTemplateRequest, opts ...grpc.CallOption) (*DeleteCompanyTemplateResponse, error) {
	out := new(DeleteCompanyTemplateResponse)
	err := c.cc.Invoke(ctx, "/notification.v1.TemplateService/DeleteCompanyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
// All implementations should embed UnimplementedTemplateServiceServer
// for forward compatibility
type TemplateServiceServer interface {
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error)
	GetEffectiveTemplate(context.Context, *GetEffectiveTemplateRequest) (*GetEffectiveTemplateResponse, error)
	ListTemplateHistory(context.Context, *ListTemplateHistoryRequest) (*ListTemplateHistoryResponse, error)
	DeleteCompanyTemplate(context.Context, *DeleteCompanyTemplateRequest) (*DeleteCompanyTemplateResponse, error)
}

// UnimplementedTemplateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTemplateServiceServer struct {
}

func (UnimplementedTemplateServiceServer) UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) GetEffectiveTemplate(context.Context, *GetEffectiveTemplateRequest) (*GetEffectiveTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplateHistory(context.Context, *ListTemplateHistoryRequest) (*ListTemplateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateHistory not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteCompanyTemplate(context.Context, *DeleteCompanyTemplateRequest) (*DeleteCompanyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyTemplate not implemented")
}

// UnsafeTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServiceServer will
// result in compilation errors.
type UnsafeTemplateServiceServer interface {
	mustEmbedUnimplementedTemplateServiceServer()
}

func RegisterTemplateServiceServer(s *grpc.Server, srv TemplateServiceServer) {
	s.RegisterService(&_TemplateService_serviceDesc, srv)
}

func _TemplateService_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.TemplateService/UpsertTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_GetEffectiveTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).GetEffectiveTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.TemplateService/GetEffectiveTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).GetEffectiveTemplate(ctx, req.(*GetEffectiveTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.TemplateService/ListTemplateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplateHistory(ctx, req.(*ListTemplateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteCompanyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteCompanyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.TemplateService/DeleteCompanyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteCompanyTemplate(ctx, req.(*DeleteCompanyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertTemplate",
			Handler:    _TemplateService_UpsertTemplate_Handler,
		},
		{
			MethodName: "GetEffectiveTemplate",
			Handler:    _TemplateService_GetEffectiveTemplate_Handler,
		},
		{
			MethodName: "ListTemplateHistory",
			Handler:    _TemplateService_ListTemplateHistory_Handler,
		},
		{
			MethodName: "DeleteCompanyTemplate",
			Handler:    _TemplateService_DeleteCompanyTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification.proto",
}
