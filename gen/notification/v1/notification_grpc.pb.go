// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: notification/v1/notification.proto

package notificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemplateService_UpsertTemplate_FullMethodName       = "/notification.v1.TemplateService/UpsertTemplate"
	TemplateService_GetEffectiveTemplate_FullMethodName = "/notification.v1.TemplateService/GetEffectiveTemplate"
	TemplateService_ListTemplateHistory_FullMethodName  = "/notification.v1.TemplateService/ListTemplateHistory"
)

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateServiceClient interface {
	UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error)
	GetEffectiveTemplate(ctx context.Context, in *GetEffectiveTemplateRequest, opts ...grpc.CallOption) (*GetEffectiveTemplateResponse, error)
	ListTemplateHistory(ctx context.Context, in *ListTemplateHistoryRequest, opts ...grpc.CallOption) (*ListTemplateHistoryResponse, error)
}

type templateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServiceClient(cc grpc.ClientConnInterface) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) UpsertTemplate(ctx context.Context, in *UpsertTemplateRequest, opts ...grpc.CallOption) (*UpsertTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_UpsertTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) GetEffectiveTemplate(ctx context.Context, in *GetEffectiveTemplateRequest, opts ...grpc.CallOption) (*GetEffectiveTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEffectiveTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_GetEffectiveTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplateHistory(ctx context.Context, in *ListTemplateHistoryRequest, opts ...grpc.CallOption) (*ListTemplateHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplateHistoryResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplateHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
// All implementations should embed UnimplementedTemplateServiceServer
// for forward compatibility.
type TemplateServiceServer interface {
	UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error)
	GetEffectiveTemplate(context.Context, *GetEffectiveTemplateRequest) (*GetEffectiveTemplateResponse, error)
	ListTemplateHistory(context.Context, *ListTemplateHistoryRequest) (*ListTemplateHistoryResponse, error)
}

// UnimplementedTemplateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplateServiceServer struct{}

func (UnimplementedTemplateServiceServer) UpsertTemplate(context.Context, *UpsertTemplateRequest) (*UpsertTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) GetEffectiveTemplate(context.Context, *GetEffectiveTemplateRequest) (*GetEffectiveTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplateHistory(context.Context, *ListTemplateHistoryRequest) (*ListTemplateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateHistory not implemented")
}
func (UnimplementedTemplateServiceServer) testEmbeddedByValue() {}

// UnsafeTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServiceServer will
// result in compilation errors.
type UnsafeTemplateServiceServer interface {
	mustEmbedUnimplementedTemplateServiceServer()
}

func RegisterTemplateServiceServer(s grpc.ServiceRegistrar, srv TemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemplateService_ServiceDesc, srv)
}

func _TemplateService_UpsertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpsertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_UpsertTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpsertTemplate(ctx, req.(*UpsertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_GetEffectiveTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).GetEffectiveTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_GetEffectiveTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).GetEffectiveTemplate(ctx, req.(*GetEffectiveTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplateHistory(ctx, req.(*ListTemplateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateService_ServiceDesc is the grpc.ServiceDesc for TemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertTemplate",
			Handler:    _TemplateService_UpsertTemplate_Handler,
		},
		{
			MethodName: "GetEffectiveTemplate",
			Handler:    _TemplateService_GetEffectiveTemplate_Handler,
		},
		{
			MethodName: "ListTemplateHistory",
			Handler:    _TemplateService_ListTemplateHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification.proto",
}
