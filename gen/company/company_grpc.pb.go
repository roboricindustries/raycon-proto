// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	GetCompanyBotMessages(ctx context.Context, in *GetCompanyBotMessagesRequest, opts ...grpc.CallOption) (*GetCompanyBotMessagesResponse, error)
	GetCompanyExtensions(ctx context.Context, in *GetCompanyExtensionsRequest, opts ...grpc.CallOption) (*GetCompanyExtensionsResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetCompanyBotMessages(ctx context.Context, in *GetCompanyBotMessagesRequest, opts ...grpc.CallOption) (*GetCompanyBotMessagesResponse, error) {
	out := new(GetCompanyBotMessagesResponse)
	err := c.cc.Invoke(ctx, "/company.v1.CompanyService/GetCompanyBotMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyExtensions(ctx context.Context, in *GetCompanyExtensionsRequest, opts ...grpc.CallOption) (*GetCompanyExtensionsResponse, error) {
	out := new(GetCompanyExtensionsResponse)
	err := c.cc.Invoke(ctx, "/company.v1.CompanyService/GetCompanyExtensions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations should embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	GetCompanyBotMessages(context.Context, *GetCompanyBotMessagesRequest) (*GetCompanyBotMessagesResponse, error)
	GetCompanyExtensions(context.Context, *GetCompanyExtensionsRequest) (*GetCompanyExtensionsResponse, error)
}

// UnimplementedCompanyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetCompanyBotMessages(context.Context, *GetCompanyBotMessagesRequest) (*GetCompanyBotMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyBotMessages not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyExtensions(context.Context, *GetCompanyExtensionsRequest) (*GetCompanyExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyExtensions not implemented")
}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_GetCompanyBotMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyBotMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyBotMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.v1.CompanyService/GetCompanyBotMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyBotMessages(ctx, req.(*GetCompanyBotMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.v1.CompanyService/GetCompanyExtensions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyExtensions(ctx, req.(*GetCompanyExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "company.v1.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyBotMessages",
			Handler:    _CompanyService_GetCompanyBotMessages_Handler,
		},
		{
			MethodName: "GetCompanyExtensions",
			Handler:    _CompanyService_GetCompanyExtensions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}
