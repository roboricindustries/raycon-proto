// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChannelConfigServiceClient is the client API for ChannelConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelConfigServiceClient interface {
	GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfig, error)
}

type channelConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelConfigServiceClient(cc grpc.ClientConnInterface) ChannelConfigServiceClient {
	return &channelConfigServiceClient{cc}
}

func (c *channelConfigServiceClient) GetChannelConfig(ctx context.Context, in *GetChannelConfigRequest, opts ...grpc.CallOption) (*ChannelConfig, error) {
	out := new(ChannelConfig)
	err := c.cc.Invoke(ctx, "/instance.v1.ChannelConfigService/GetChannelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelConfigServiceServer is the server API for ChannelConfigService service.
// All implementations should embed UnimplementedChannelConfigServiceServer
// for forward compatibility
type ChannelConfigServiceServer interface {
	GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfig, error)
}

// UnimplementedChannelConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChannelConfigServiceServer struct {
}

func (UnimplementedChannelConfigServiceServer) GetChannelConfig(context.Context, *GetChannelConfigRequest) (*ChannelConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}

// UnsafeChannelConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelConfigServiceServer will
// result in compilation errors.
type UnsafeChannelConfigServiceServer interface {
	mustEmbedUnimplementedChannelConfigServiceServer()
}

func RegisterChannelConfigServiceServer(s *grpc.Server, srv ChannelConfigServiceServer) {
	s.RegisterService(&_ChannelConfigService_serviceDesc, srv)
}

func _ChannelConfigService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConfigServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instance.v1.ChannelConfigService/GetChannelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConfigServiceServer).GetChannelConfig(ctx, req.(*GetChannelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "instance.v1.ChannelConfigService",
	HandlerType: (*ChannelConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelConfig",
			Handler:    _ChannelConfigService_GetChannelConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instance/instance.proto",
}
