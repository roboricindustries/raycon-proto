// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DealServiceClient is the client API for DealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealServiceClient interface {
	CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealResponse, error)
	ReadDeal(ctx context.Context, in *ReadDealRequest, opts ...grpc.CallOption) (*ReadDealResponse, error)
	SetDealServiceId(ctx context.Context, in *SetDealServiceIdRequest, opts ...grpc.CallOption) (*SetDealServiceIdResponse, error)
	DistributeDeal(ctx context.Context, in *DistributeDealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDealServiceClient(cc grpc.ClientConnInterface) DealServiceClient {
	return &dealServiceClient{cc}
}

func (c *dealServiceClient) CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealResponse, error) {
	out := new(CreateDealResponse)
	err := c.cc.Invoke(ctx, "/deal.v1.DealService/CreateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) ReadDeal(ctx context.Context, in *ReadDealRequest, opts ...grpc.CallOption) (*ReadDealResponse, error) {
	out := new(ReadDealResponse)
	err := c.cc.Invoke(ctx, "/deal.v1.DealService/ReadDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) SetDealServiceId(ctx context.Context, in *SetDealServiceIdRequest, opts ...grpc.CallOption) (*SetDealServiceIdResponse, error) {
	out := new(SetDealServiceIdResponse)
	err := c.cc.Invoke(ctx, "/deal.v1.DealService/SetDealServiceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) DistributeDeal(ctx context.Context, in *DistributeDealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/deal.v1.DealService/DistributeDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealServiceServer is the server API for DealService service.
// All implementations should embed UnimplementedDealServiceServer
// for forward compatibility
type DealServiceServer interface {
	CreateDeal(context.Context, *CreateDealRequest) (*CreateDealResponse, error)
	ReadDeal(context.Context, *ReadDealRequest) (*ReadDealResponse, error)
	SetDealServiceId(context.Context, *SetDealServiceIdRequest) (*SetDealServiceIdResponse, error)
	DistributeDeal(context.Context, *DistributeDealRequest) (*emptypb.Empty, error)
}

// UnimplementedDealServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDealServiceServer struct {
}

func (UnimplementedDealServiceServer) CreateDeal(context.Context, *CreateDealRequest) (*CreateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeal not implemented")
}
func (UnimplementedDealServiceServer) ReadDeal(context.Context, *ReadDealRequest) (*ReadDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeal not implemented")
}
func (UnimplementedDealServiceServer) SetDealServiceId(context.Context, *SetDealServiceIdRequest) (*SetDealServiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDealServiceId not implemented")
}
func (UnimplementedDealServiceServer) DistributeDeal(context.Context, *DistributeDealRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeDeal not implemented")
}

// UnsafeDealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealServiceServer will
// result in compilation errors.
type UnsafeDealServiceServer interface {
	mustEmbedUnimplementedDealServiceServer()
}

func RegisterDealServiceServer(s *grpc.Server, srv DealServiceServer) {
	s.RegisterService(&_DealService_serviceDesc, srv)
}

func _DealService_CreateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).CreateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.v1.DealService/CreateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).CreateDeal(ctx, req.(*CreateDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_ReadDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).ReadDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.v1.DealService/ReadDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).ReadDeal(ctx, req.(*ReadDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_SetDealServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDealServiceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).SetDealServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.v1.DealService/SetDealServiceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).SetDealServiceId(ctx, req.(*SetDealServiceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_DistributeDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).DistributeDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deal.v1.DealService/DistributeDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).DistributeDeal(ctx, req.(*DistributeDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DealService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deal.v1.DealService",
	HandlerType: (*DealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeal",
			Handler:    _DealService_CreateDeal_Handler,
		},
		{
			MethodName: "ReadDeal",
			Handler:    _DealService_ReadDeal_Handler,
		},
		{
			MethodName: "SetDealServiceId",
			Handler:    _DealService_SetDealServiceId_Handler,
		},
		{
			MethodName: "DistributeDeal",
			Handler:    _DealService_DistributeDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deal/deal.proto",
}
