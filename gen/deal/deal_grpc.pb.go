// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: deal/deal.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DealService_CreateDeal_FullMethodName       = "/deal.v1.DealService/CreateDeal"
	DealService_ReadDeal_FullMethodName         = "/deal.v1.DealService/ReadDeal"
	DealService_SetDealServiceId_FullMethodName = "/deal.v1.DealService/SetDealServiceId"
	DealService_DistributeDeal_FullMethodName   = "/deal.v1.DealService/DistributeDeal"
)

// DealServiceClient is the client API for DealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealServiceClient interface {
	CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealResponse, error)
	ReadDeal(ctx context.Context, in *ReadDealRequest, opts ...grpc.CallOption) (*ReadDealResponse, error)
	SetDealServiceId(ctx context.Context, in *SetDealServiceIdRequest, opts ...grpc.CallOption) (*SetDealServiceIdResponse, error)
	DistributeDeal(ctx context.Context, in *DistributeDealRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type dealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDealServiceClient(cc grpc.ClientConnInterface) DealServiceClient {
	return &dealServiceClient{cc}
}

func (c *dealServiceClient) CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDealResponse)
	err := c.cc.Invoke(ctx, DealService_CreateDeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) ReadDeal(ctx context.Context, in *ReadDealRequest, opts ...grpc.CallOption) (*ReadDealResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDealResponse)
	err := c.cc.Invoke(ctx, DealService_ReadDeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) SetDealServiceId(ctx context.Context, in *SetDealServiceIdRequest, opts ...grpc.CallOption) (*SetDealServiceIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDealServiceIdResponse)
	err := c.cc.Invoke(ctx, DealService_SetDealServiceId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealServiceClient) DistributeDeal(ctx context.Context, in *DistributeDealRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DealService_DistributeDeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealServiceServer is the server API for DealService service.
// All implementations should embed UnimplementedDealServiceServer
// for forward compatibility.
type DealServiceServer interface {
	CreateDeal(context.Context, *CreateDealRequest) (*CreateDealResponse, error)
	ReadDeal(context.Context, *ReadDealRequest) (*ReadDealResponse, error)
	SetDealServiceId(context.Context, *SetDealServiceIdRequest) (*SetDealServiceIdResponse, error)
	DistributeDeal(context.Context, *DistributeDealRequest) (*empty.Empty, error)
}

// UnimplementedDealServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDealServiceServer struct{}

func (UnimplementedDealServiceServer) CreateDeal(context.Context, *CreateDealRequest) (*CreateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeal not implemented")
}
func (UnimplementedDealServiceServer) ReadDeal(context.Context, *ReadDealRequest) (*ReadDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeal not implemented")
}
func (UnimplementedDealServiceServer) SetDealServiceId(context.Context, *SetDealServiceIdRequest) (*SetDealServiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDealServiceId not implemented")
}
func (UnimplementedDealServiceServer) DistributeDeal(context.Context, *DistributeDealRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeDeal not implemented")
}
func (UnimplementedDealServiceServer) testEmbeddedByValue() {}

// UnsafeDealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealServiceServer will
// result in compilation errors.
type UnsafeDealServiceServer interface {
	mustEmbedUnimplementedDealServiceServer()
}

func RegisterDealServiceServer(s grpc.ServiceRegistrar, srv DealServiceServer) {
	// If the following call pancis, it indicates UnimplementedDealServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DealService_ServiceDesc, srv)
}

func _DealService_CreateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).CreateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealService_CreateDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).CreateDeal(ctx, req.(*CreateDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_ReadDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).ReadDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealService_ReadDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).ReadDeal(ctx, req.(*ReadDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_SetDealServiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDealServiceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).SetDealServiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealService_SetDealServiceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).SetDealServiceId(ctx, req.(*SetDealServiceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealService_DistributeDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServiceServer).DistributeDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealService_DistributeDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServiceServer).DistributeDeal(ctx, req.(*DistributeDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DealService_ServiceDesc is the grpc.ServiceDesc for DealService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DealService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deal.v1.DealService",
	HandlerType: (*DealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeal",
			Handler:    _DealService_CreateDeal_Handler,
		},
		{
			MethodName: "ReadDeal",
			Handler:    _DealService_ReadDeal_Handler,
		},
		{
			MethodName: "SetDealServiceId",
			Handler:    _DealService_SetDealServiceId_Handler,
		},
		{
			MethodName: "DistributeDeal",
			Handler:    _DealService_DistributeDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deal/deal.proto",
}
