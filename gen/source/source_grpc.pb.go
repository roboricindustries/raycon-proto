// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	FindMatchingOrOther(ctx context.Context, in *MatchingSourceRequest, opts ...grpc.CallOption) (*MatchingSourceResponse, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) FindMatchingOrOther(ctx context.Context, in *MatchingSourceRequest, opts ...grpc.CallOption) (*MatchingSourceResponse, error) {
	out := new(MatchingSourceResponse)
	err := c.cc.Invoke(ctx, "/source.v1.SourceService/FindMatchingOrOther", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations should embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	FindMatchingOrOther(context.Context, *MatchingSourceRequest) (*MatchingSourceResponse, error)
}

// UnimplementedSourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (UnimplementedSourceServiceServer) FindMatchingOrOther(context.Context, *MatchingSourceRequest) (*MatchingSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMatchingOrOther not implemented")
}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s *grpc.Server, srv SourceServiceServer) {
	s.RegisterService(&_SourceService_serviceDesc, srv)
}

func _SourceService_FindMatchingOrOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).FindMatchingOrOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.v1.SourceService/FindMatchingOrOther",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).FindMatchingOrOther(ctx, req.(*MatchingSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "source.v1.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMatchingOrOther",
			Handler:    _SourceService_FindMatchingOrOther_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/source.proto",
}
